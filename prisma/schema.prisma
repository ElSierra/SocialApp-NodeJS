// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  email                 String         @unique
  name                  String
  notificationId        String?
  userName              String         @unique
  password              String
  verified              Boolean        @default(false)
  emailIsVerified       Boolean        @default(false)
  prefs                 Json?
  imageUri              String?
  post                  Post[]         @relation("User")
  rePost                Post[]         @relation("RepostUser", fields: [rePostIDs], references: [id])
  rePostIDs             String[]       @db.ObjectId
  followingCount        BigInt?        @default(0)
  followersCount        BigInt?        @default(0)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  followers             User[]         @relation("UserFollows", fields: [followersIDs], references: [id])
  followersIDs          String[]       @db.ObjectId
  following             User[]         @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs          String[]       @db.ObjectId
  comments              Comment[]
  chat                  Chat[]         @relation(fields: [chatIDs], references: [id])
  chatIDs               String[]       @db.ObjectId
  like                  Like[]
  Message               Message[]
  notification          Notification[]
  notificationsReceived Notification[] @relation("NotificationUser")
}

model Post {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  user           User?     @relation("User", fields: [userId], references: [id])
  userId         String?   @db.ObjectId
  repostUser     User[]    @relation("RepostUser", fields: [repostUserId], references: [id])
  repostUserId   String[]  @db.ObjectId
  audioUri       String?
  audioTitle     String?
  videoUri       String?
  videoThumbnail String?
  comments       Comment[]
  videoTitle     String?
  photoUri       String[]
  postText       String?
  videoViews     String?
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt
  like           Like[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  postId    String?  @db.ObjectId
  commentId String?  @db.ObjectId
  createdAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  User      User     @relation(fields: [userId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?  @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  messagesIds String[]  @db.ObjectId
  messages    Message[]
  userIds     String[]  @db.ObjectId
  users       User[]    @relation(fields: [userIds], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String?
  photoUri  String?
  chat      Chat?    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String?  @db.ObjectId
  senderId  String   @db.ObjectId
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  text        String
  imageUri    String?
  to          String?
  type        NotificationType
  notifUser   User?            @relation("NotificationUser", fields: [notifUserId], references: [id])
  notifUserId String?          @db.ObjectId
  remindDate  DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  User        User?            @relation(fields: [userId], references: [id])
  userId      String?          @db.ObjectId
}

enum NotificationType {
  Follow
  Posts
  Suggestions
  Reminder
}
