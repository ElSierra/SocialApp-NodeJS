// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  email           String    @unique
  name            String
  userName        String    @unique
  password        String
  verified        Boolean   @default(false)
  emailIsVerified Boolean   @default(false)
  prefs           Json?
  imageUri        String?
  post            Post[]
  followingCount  BigInt?   @default(0)
  followersCount  BigInt?   @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  followers       User[]    @relation("UserFollows", fields: [followersIDs], references: [id])
  followersIDs    String[]  @db.ObjectId
  following       User[]    @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs    String[]  @db.ObjectId
  comments        Comment[]
  like            Like[]
}

model Post {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?   @db.ObjectId
  audioUri   String?
  audioTitle String?
  videoUri   String?
  videoThumbnail String?
  comments   Comment[]
  videoTitle String?
  photoUri   String[]
  postText   String?
  videoViews String?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  like       Like[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  userId    String   @db.ObjectId
  postId    String?  @db.ObjectId
  commentId String?  @db.ObjectId
  createdAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  User      User     @relation(fields: [userId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?  @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
